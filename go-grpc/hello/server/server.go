package main

import (
	"context"
	"flag"
	"fmt"
	"log"
	"net"

	"github.com/rajkumar-km/go-play/go-grpc/hello/proto"
	"google.golang.org/grpc"
)

var (
	port = flag.Int("port", 50051, "The server port")
)

// server implements the interface HelloServer generated by protoc
type server struct {
	// UnimplementedHelloServer must be embedded to have forward compatible implementations
	proto.UnimplementedHelloServer
}

// SayHello implements HelloServer.SayHello()
func (s *server) SayHello(ctx context.Context, in *proto.HelloRequest) (*proto.HelloReply, error) {
	log.Printf("Received: %v", in.GetName())
	return &proto.HelloReply{Message: "Hello " + in.GetName()}, nil
}

func main() {
	flag.Parse()
	// Create a TCP listener for gRPC server
	lis, err := net.Listen("tcp", fmt.Sprintf(":%d", *port))
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}
	// Create a gRPC server
	s := grpc.NewServer()

	// Register our implementation with gRPC server
	proto.RegisterHelloServer(s, &server{})

	// Run the server with listener
	log.Printf("server listening at %v", lis.Addr())
	if err := s.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}
